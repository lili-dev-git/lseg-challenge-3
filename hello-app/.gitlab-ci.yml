stages: [test, build, scan, deploy]

variables:
  APP_NAME: "hello-sre"
  IMAGE: "$CI_REGISTRY_IMAGE/$APP_NAME:$CI_COMMIT_SHORT_SHA"
  # DinD compatibility
  DOCKER_TLS_CERTDIR: ""
  # Trivy severities that fail the pipeline (quality gate)
  TRIVY_SEVERITY: "CRITICAL,HIGH"

# 1) Quick feedback: syntax + deps
unit_test:
  stage: test
  image: python:3.12-slim
  script:
    - python -m pip install --no-cache-dir -r requirements.txt
    - python -m py_compile app.py
  rules:
    - if: $CI_COMMIT_BRANCH

# 2) Build + push to GitLab Container Registry
build_image:
  stage: build
  image: docker:24
  services: ["docker:24-dind"]
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - docker build -t "$IMAGE" .
    - docker push "$IMAGE"
  needs: [unit_test]
  rules:
    - if: $CI_COMMIT_BRANCH

# 3) Quality gate: fail on HIGH/CRITICAL vulns
image_scan:
  stage: scan
  image: aquasec/trivy:latest
  script:
    - trivy image --exit-code 1 --no-progress --severity "$TRIVY_SEVERITY" "$IMAGE"
  needs: [build_image]
  rules:
    - if: $CI_COMMIT_BRANCH

# Shared deploy template
.deploy_template:
  stage: deploy
  image: alpine:3.19
  before_script:
    - apk add --no-cache kubectl gettext
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig
    - export KUBECONFIG="$PWD/kubeconfig"
    # Create namespace if missing
    - kubectl create namespace "$K8S_NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
    # Refresh app secret (never stored in repo)
    - kubectl -n "$K8S_NAMESPACE" delete secret "${APP_NAME}-secret" --ignore-not-found=true
    - kubectl -n "$K8S_NAMESPACE" create secret generic "${APP_NAME}-secret" --from-literal=message="$HELLO_SECRET_MSG"
  script:
    - export IMAGE APP_NAME HOST
    - envsubst < k8s/deployment.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
    - envsubst < k8s/service.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
    - if [ -n "$HOST" ]; then envsubst < k8s/ingress.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -; fi
    - kubectl -n "$K8S_NAMESPACE" rollout status deploy/"$APP_NAME" --timeout=90s
  needs: [image_scan]
  environment:
    name: $ENV_NAME
    url: $ENV_URL

# 4a) Review Apps (branches/MRs)
deploy_review:
  extends: .deploy_template
  variables:
    K8S_NAMESPACE: "review-$CI_COMMIT_REF_SLUG"
    ENV_NAME: "review/$CI_COMMIT_REF_SLUG"
    HOST: "$CI_COMMIT_REF_SLUG.$REVIEW_BASE_DOMAIN"
    ENV_URL: "https://$CI_COMMIT_REF_SLUG.$REVIEW_BASE_DOMAIN"
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "main"
  environment:
    name: $ENV_NAME
    url: $ENV_URL
    on_stop: stop_review
    auto_stop_in: 2 days

stop_review:
  stage: deploy
  image: alpine:3.19
  variables:
    K8S_NAMESPACE: "review-$CI_COMMIT_REF_SLUG"
  before_script:
    - apk add --no-cache kubectl
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig
    - export KUBECONFIG="$PWD/kubeconfig"
  script:
    - kubectl delete namespace "$K8S_NAMESPACE" --ignore-not-found=true
  rules:
    - if: $CI_MERGE_REQUEST_ID
  when: manual
  environment:
    name: "review/$CI_COMMIT_REF_SLUG"
    action: stop

# 4b) Dev (auto on develop)
deploy_dev:
  extends: .deploy_template
  variables:
    K8S_NAMESPACE: "dev"
    ENV_NAME: "dev"
    HOST: "dev.$BASE_DOMAIN"
    ENV_URL: "https://dev.$BASE_DOMAIN"
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

# 4c) Prod (manual on main — protected)
deploy_prod:
  extends: .deploy_template
  variables:
    K8S_NAMESPACE: "prod"
    ENV_NAME: "prod"
    HOST: "app.$BASE_DOMAIN"
    ENV_URL: "https://app.$BASE_DOMAIN"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  when: manual
  allow_failure: false
  # Protect this job in GitLab → Settings → CI/CD → Protected jobs
