name: challenge_3_workflow

on:
  push:
    branches: ['**']
  pull_request:

permissions:
  contents: read
  packages: write

env:
  APP_NAME: hello-sre
  IMAGE: ghcr.io/${{ github.repository }}/hello-sre:${{ github.sha }}
  BASE_DOMAIN: ${{ vars.BASE_DOMAIN }}
  REVIEW_BASE_DOMAIN: ${{ vars.REVIEW_BASE_DOMAIN }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: |
          python -m pip install --no-cache-dir -r requirements.txt
          python -m py_compile app.py

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}

  scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'

  deploy_review:
    if: github.event_name == 'pull_request' || (github.ref != 'refs/heads/develop' && github.ref != 'refs/heads/main')
    runs-on: ubuntu-latest
    needs: scan
    environment:
      name: review-${{ github.head_ref || github.ref_name }}
      url: https://${{ github.head_ref || github.ref_name }}.${{ env.REVIEW_BASE_DOMAIN }}
    steps:
      - uses: actions/checkout@v4
      - name: Install kubectl & envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y kubectl gettext-base
      - name: Prepare kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV
      - name: Deploy to review
        env:
          K8S_NAMESPACE: review-${{ github.head_ref || github.ref_name }}
          HOST: ${{ github.head_ref || github.ref_name }}.${{ env.REVIEW_BASE_DOMAIN }}
          IMAGE: ${{ env.IMAGE }}
          APP_NAME: ${{ env.APP_NAME }}
          HELLO_SECRET_MSG: ${{ secrets.HELLO_SECRET_MSG }}
        run: |
          kubectl create namespace "$K8S_NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n "$K8S_NAMESPACE" delete secret "${APP_NAME}-secret" --ignore-not-found=true
          kubectl -n "$K8S_NAMESPACE" create secret generic "${APP_NAME}-secret" --from-literal=message="$HELLO_SECRET_MSG"
          export IMAGE APP_NAME HOST
          envsubst < k8s/deployment.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
          envsubst < k8s/service.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
          if [ -n "$HOST" ]; then envsubst < k8s/ingress.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -; fi
          kubectl -n "$K8S_NAMESPACE" rollout status deploy/"$APP_NAME" --timeout=90s

  deploy_dev:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: scan
    environment:
      name: dev
      url: https://dev.${{ env.BASE_DOMAIN }}
    steps:
      - uses: actions/checkout@v4
      - name: Install kubectl & envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y kubectl gettext-base
      - name: Prepare kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV
      - name: Deploy to dev
        env:
          K8S_NAMESPACE: dev
          HOST: dev.${{ env.BASE_DOMAIN }}
          IMAGE: ${{ env.IMAGE }}
          APP_NAME: ${{ env.APP_NAME }}
          HELLO_SECRET_MSG: ${{ secrets.HELLO_SECRET_MSG }}
        run: |
          kubectl create namespace "$K8S_NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n "$K8S_NAMESPACE" delete secret "${APP_NAME}-secret" --ignore-not-found=true
          kubectl -n "$K8S_NAMESPACE" create secret generic "${APP_NAME}-secret" --from-literal=message="$HELLO_SECRET_MSG"
          export IMAGE APP_NAME HOST
          envsubst < k8s/deployment.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
          envsubst < k8s/service.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
          envsubst < k8s/ingress.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
          kubectl -n "$K8S_NAMESPACE" rollout status deploy/"$APP_NAME" --timeout=90s

  deploy_prod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: scan
    environment:
      name: prod
      url: https://app.${{ env.BASE_DOMAIN }}
    steps:
      - uses: actions/checkout@v4
      - name: Install kubectl & envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y kubectl gettext-base
      - name: Prepare kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$PWD/kubeconfig" >> $GITHUB_ENV
      - name: Deploy to prod
        env:
          K8S_NAMESPACE: prod
          HOST: app.${{ env.BASE_DOMAIN }}
          IMAGE: ${{ env.IMAGE }}
          APP_NAME: ${{ env.APP_NAME }}
          HELLO_SECRET_MSG: ${{ secrets.HELLO_SECRET_MSG }}
        run: |
          kubectl create namespace "$K8S_NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n "$K8S_NAMESPACE" delete secret "${APP_NAME}-secret" --ignore-not-found=true
          kubectl -n "$K8S_NAMESPACE" create secret generic "${APP_NAME}-secret" --from-literal=message="$HELLO_SECRET_MSG"
          export IMAGE APP_NAME HOST
          envsubst < k8s/deployment.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
          envsubst < k8s/service.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
          envsubst < k8s/ingress.yaml | kubectl -n "$K8S_NAMESPACE" apply -f -
          kubectl -n "$K8S_NAMESPACE" rollout status deploy/"$APP_NAME" --timeout=90s
